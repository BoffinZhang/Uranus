# define verilog file template
class VerilogFileTemplate(object):
    file_template = '`timescale 1ns / 1ps\n\n' + \
            '// Block Design: {bd_name}\n// generated by autowire.py\n\n' + \
            'module {module_name}(\n{ports}\n);\n\n{wires}\n\n' + \
            '{modules}\n\nendmodule // {module_name}\n'
    port_def_template = '{direction} {type}{bus} {name}'
    wire_def_template = 'wire{bus} {name}{reference};'
    module_instance_template = '{module_name} {instance_name}(\n{io});'
    io_connection_template = '.{port}({wire})'
    template_tab_size = 4


# define verilog AST objects
class _VerilogBaseAST(object):
    def __init__(self):
        self._indent = ' ' * VerilogFileTemplate.template_tab_size

    @staticmethod
    def _generate_map(ast_list, indent):
        return map(lambda obj: obj.generate(indent), ast_list)

    def generate(self, indent=0):
        raise NotImplementedError

class VerilogFileAST(_VerilogBaseAST):
    def __init__(self):
        super().__init__()
        self.module_name = ''
        self.ports = {}
        self.wires = []
        self.modules = {}

    def generate(self, indent=0):
        for wire in self.wires:
            if wire.reference:
                wire.bus = self.ports[wire.reference].bus
        ports = ',\n'.join(self._generate_map(self.ports.values(), indent + 1))
        wires = '\n'.join(self._generate_map(self.wires, indent + 1))
        modules = '\n\n'.join(self._generate_map(self.modules.values(), indent + 1))
        return VerilogFileTemplate.file_template.format(module_name=self.module_name,
                ports=ports, wires=wires, modules=modules, bd_name='{bd_name}')

class VerilogPortAST(_VerilogBaseAST):
    def __init__(self):
        super().__init__()
        self.__dir_map = {
            'in': 'input',
            'out': 'output',
            'inout': 'inout'
        }
        self.direction = ''
        self.type = ''
        self.bus = [0, 0]
        self.name = ''

    def generate(self, indent=0):
        indent_str = self._indent * indent
        bus_str = '[%d:%d]' % (self.bus[0], self.bus[1])
        return indent_str + \
                VerilogFileTemplate.port_def_template.format(type=self.type,
                    name=self.name, direction=self.__dir_map[self.direction],
                    bus=bus_str if sum(self.bus) else '').replace('  ', ' ')

class VerilogWireAST(_VerilogBaseAST):
    def __init__(self):
        super().__init__()
        self.bus = []
        self.name = ''
        self.reference = ''

    def generate(self, indent=0):
        indent_str = self._indent * indent
        bus_str = ''
        if sum(self.bus):
            bus_str = '[%d:%d]' % (self.bus[0], self.bus[1])
        ref_str = ' = ' + self.reference if self.reference else ''
        return indent_str + \
                VerilogFileTemplate.wire_def_template.format(reference=ref_str,
                    name=self.name, bus=bus_str)

class VerilogModuleAST(_VerilogBaseAST):
    def __init__(self):
        super().__init__()
        self.module_name = ''
        self.instance_name = ''
        self.connections = []

    def generate(self, indent=0):
        indent_str = self._indent * indent
        io = ',\n'.join(self._generate_map(self.connections, indent + 1))
        io += '\n' + indent_str
        self.instance_name = self.instance_name.lower()
        return indent_str + \
                VerilogFileTemplate.module_instance_template.format(io=io,
                    module_name=self.module_name, instance_name=self.instance_name)

class VerilogIOConnectionAST(_VerilogBaseAST):
    def __init__(self):
        super().__init__()
        self.port_name = ''
        self.wire_name = ''

    def generate(self, indent=0):
        indent_str = self._indent * indent
        return indent_str + \
                VerilogFileTemplate.io_connection_template.format(port=self.port_name,
                    wire=self.wire_name)

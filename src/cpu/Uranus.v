`timescale 1ns / 1ps

// Block Design: Core.bd
// generated by autowire.py

module Uranus(
    output [31:0] debug_reg_write_data,
    output [4:0] debug_reg_write_addr,
    input [31:0] ram_read_data,
    output [31:0] ram_write_data,
    output [31:0] ram_addr,
    output [3:0] ram_write_en,
    output ram_en,
    input clk,
    input rst,
    input [31:0] rom_read_data,
    output [31:0] debug_pc_addr,
    output [3:0] debug_reg_write_en,
    output rom_en,
    output [3:0] rom_write_en,
    output [31:0] rom_addr,
    output [31:0] rom_write_data
);

    wire[31:0] ifid_0_addr_out;
    wire[31:0] ifid_0_inst_out;
    wire id_0_write_reg_en;
    wire[4:0] id_0_write_reg_addr;
    wire[31:0] id_0_operand_2;
    wire[31:0] id_0_operand_1;
    wire[4:0] id_0_shamt;
    wire[5:0] id_0_funct;
    wire[4:0] id_0_reg_addr_2;
    wire[4:0] id_0_reg_addr_1;
    wire id_0_reg_read_en_2;
    wire id_0_reg_read_en_1;
    wire[5:0] idex_0_funct_out;
    wire[4:0] idex_0_shamt_out;
    wire[31:0] idex_0_operand_1_out;
    wire[31:0] idex_0_operand_2_out;
    wire idex_0_write_reg_en_out;
    wire[4:0] idex_0_write_reg_addr_out;
    wire[31:0] ex_0_result_out;
    wire ex_0_write_reg_en_out;
    wire[4:0] ex_0_write_reg_addr_out;
    wire[31:0] exmem_0_result_out;
    wire exmem_0_write_reg_en_out;
    wire[4:0] exmem_0_write_reg_addr_out;
    wire[31:0] mem_0_result_out;
    wire mem_0_write_reg_en_out;
    wire[4:0] mem_0_write_reg_addr_out;
    wire memwb_0_write_reg_en_out;
    wire[31:0] memwb_0_result_out;
    wire[4:0] memwb_0_write_reg_addr_out;
    wire[31:0] regreadproxy_0_read_data_1;
    wire[31:0] regreadproxy_0_read_data_2;
    wire[31:0] regfile_0_read_data_1;
    wire[31:0] regfile_0_read_data_2;
    wire memwb_0_hilo_write_en_out;
    wire[31:0] memwb_0_hi_out;
    wire[31:0] memwb_0_lo_out;
    wire[31:0] hilo_0_hi;
    wire[31:0] hilo_0_lo;
    wire ex_0_hilo_write_en;
    wire[31:0] ex_0_hi_out;
    wire[31:0] ex_0_lo_out;
    wire exmem_0_hilo_write_en_out;
    wire[31:0] exmem_0_hi_out;
    wire[31:0] exmem_0_lo_out;
    wire mem_0_hilo_write_en_out;
    wire[31:0] mem_0_hi_out;
    wire[31:0] mem_0_lo_out;
    wire[31:0] hiloreadproxy_0_hi_out;
    wire[31:0] hiloreadproxy_0_lo_out;
    wire id_0_branch_flag;
    wire[31:0] id_0_branch_addr;
    wire id_0_mem_read_flag;
    wire id_0_mem_write_flag;
    wire id_0_mem_sign_ext_flag;
    wire[3:0] id_0_mem_sel;
    wire[31:0] id_0_mem_write_data;
    wire idex_0_mem_read_flag_out;
    wire idex_0_mem_write_flag_out;
    wire idex_0_mem_sign_ext_flag_out;
    wire[3:0] idex_0_mem_sel_out;
    wire[31:0] idex_0_mem_write_data_out;
    wire ex_0_mem_read_flag_out;
    wire ex_0_mem_write_flag_out;
    wire ex_0_mem_sign_ext_flag_out;
    wire[3:0] ex_0_mem_sel_out;
    wire[31:0] ex_0_mem_write_data_out;
    wire exmem_0_mem_read_flag_out;
    wire exmem_0_mem_write_flag_out;
    wire exmem_0_mem_sign_ext_flag_out;
    wire[3:0] exmem_0_mem_sel_out;
    wire[31:0] exmem_0_mem_write_data_out;
    wire[31:0] ram_read_data_1 = ram_read_data;
    wire[31:0] mem_0_ram_write_data;
    wire[31:0] mem_0_ram_addr;
    wire[3:0] mem_0_ram_write_sel;
    wire mem_0_ram_en;
    wire clk_1 = clk;
    wire rst_1 = rst;
    wire[31:0] rom_read_data_1 = rom_read_data;
    wire[31:0] memwb_0_debug_pc_addr_out;
    wire[3:0] memwb_0_debug_reg_write_en;
    wire pc_0_rom_en;
    wire[3:0] pc_0_rom_write_en;
    wire[31:0] pc_0_rom_addr;
    wire[31:0] pc_0_rom_write_data;
    wire[31:0] id_0_debug_pc_addr;
    wire[31:0] idex_0_debug_pc_addr_out;
    wire[31:0] ex_0_debug_pc_addr_out;
    wire[31:0] exmem_0_debug_pc_addr_out;
    wire[31:0] mem_0_debug_pc_addr_out;
    wire id_0_stall_request;
    wire ex_0_stall_request;
    wire regreadproxy_0_load_related_1;
    wire regreadproxy_0_load_related_2;
    wire ex_0_ex_load_flag;
    wire pipelinecontroller_0_stall_pc;
    wire pipelinecontroller_0_stall_if;
    wire pipelinecontroller_0_stall_id;
    wire pipelinecontroller_0_stall_ex;
    wire pipelinecontroller_0_stall_mem;
    wire pipelinecontroller_0_stall_wb;

    assign debug_reg_write_data = memwb_0_result_out;
    assign debug_reg_write_addr = memwb_0_write_reg_addr_out;
    assign ram_write_data = mem_0_ram_write_data;
    assign ram_addr = mem_0_ram_addr;
    assign ram_write_en = mem_0_ram_write_sel;
    assign ram_en = mem_0_ram_en;
    assign debug_pc_addr = memwb_0_debug_pc_addr_out;
    assign debug_reg_write_en = memwb_0_debug_reg_write_en;
    assign rom_en = pc_0_rom_en;
    assign rom_write_en = pc_0_rom_write_en;
    assign rom_addr = pc_0_rom_addr;
    assign rom_write_data = pc_0_rom_write_data;

    RegFile regfile_0(
        .read_addr_2(id_0_reg_addr_2),
        .read_addr_1(id_0_reg_addr_1),
        .read_en_2(id_0_reg_read_en_2),
        .read_en_1(id_0_reg_read_en_1),
        .write_en(memwb_0_write_reg_en_out),
        .write_data(memwb_0_result_out),
        .write_addr(memwb_0_write_reg_addr_out),
        .read_data_1(regfile_0_read_data_1),
        .read_data_2(regfile_0_read_data_2),
        .clk(clk_1),
        .rst(rst_1)
    );

    HILO hilo_0(
        .write_en(memwb_0_hilo_write_en_out),
        .hi_in(memwb_0_hi_out),
        .lo_in(memwb_0_lo_out),
        .hi(hilo_0_hi),
        .lo(hilo_0_lo),
        .clk(clk_1),
        .rst(rst_1)
    );

    HILOReadProxy hiloreadproxy_0(
        .wb_hilo_write_en(memwb_0_hilo_write_en_out),
        .wb_hi_in(memwb_0_hi_out),
        .wb_lo_in(memwb_0_lo_out),
        .hi_in(hilo_0_hi),
        .lo_in(hilo_0_lo),
        .mem_hilo_write_en(mem_0_hilo_write_en_out),
        .mem_hi_in(mem_0_hi_out),
        .mem_lo_in(mem_0_lo_out),
        .hi_out(hiloreadproxy_0_hi_out),
        .lo_out(hiloreadproxy_0_lo_out)
    );

    PC pc_0(
        .branch_flag(id_0_branch_flag),
        .branch_addr(id_0_branch_addr),
        .clk(clk_1),
        .rst(rst_1),
        .rom_en(pc_0_rom_en),
        .rom_write_en(pc_0_rom_write_en),
        .rom_addr(pc_0_rom_addr),
        .rom_write_data(pc_0_rom_write_data),
        .stall_pc(pipelinecontroller_0_stall_pc)
    );

    IFID ifid_0(
        .addr_out(ifid_0_addr_out),
        .inst_out(ifid_0_inst_out),
        .clk(clk_1),
        .rst(rst_1),
        .inst_in(rom_read_data_1),
        .addr_in(pc_0_rom_addr),
        .stall_current_stage(pipelinecontroller_0_stall_if),
        .stall_next_stage(pipelinecontroller_0_stall_id)
    );

    ID id_0(
        .addr(ifid_0_addr_out),
        .inst(ifid_0_inst_out),
        .write_reg_en(id_0_write_reg_en),
        .write_reg_addr(id_0_write_reg_addr),
        .operand_2(id_0_operand_2),
        .operand_1(id_0_operand_1),
        .shamt(id_0_shamt),
        .funct(id_0_funct),
        .reg_addr_2(id_0_reg_addr_2),
        .reg_addr_1(id_0_reg_addr_1),
        .reg_read_en_2(id_0_reg_read_en_2),
        .reg_read_en_1(id_0_reg_read_en_1),
        .reg_data_1(regreadproxy_0_read_data_1),
        .reg_data_2(regreadproxy_0_read_data_2),
        .branch_flag(id_0_branch_flag),
        .branch_addr(id_0_branch_addr),
        .mem_read_flag(id_0_mem_read_flag),
        .mem_write_flag(id_0_mem_write_flag),
        .mem_sign_ext_flag(id_0_mem_sign_ext_flag),
        .mem_sel(id_0_mem_sel),
        .mem_write_data(id_0_mem_write_data),
        .rst(rst_1),
        .debug_pc_addr(id_0_debug_pc_addr),
        .stall_request(id_0_stall_request),
        .load_related_1(regreadproxy_0_load_related_1),
        .load_related_2(regreadproxy_0_load_related_2)
    );

    IDEX idex_0(
        .write_reg_en_in(id_0_write_reg_en),
        .write_reg_addr_in(id_0_write_reg_addr),
        .operand_2_in(id_0_operand_2),
        .operand_1_in(id_0_operand_1),
        .shamt_in(id_0_shamt),
        .funct_in(id_0_funct),
        .funct_out(idex_0_funct_out),
        .shamt_out(idex_0_shamt_out),
        .operand_1_out(idex_0_operand_1_out),
        .operand_2_out(idex_0_operand_2_out),
        .write_reg_en_out(idex_0_write_reg_en_out),
        .write_reg_addr_out(idex_0_write_reg_addr_out),
        .mem_read_flag_in(id_0_mem_read_flag),
        .mem_write_flag_in(id_0_mem_write_flag),
        .mem_sign_ext_flag_in(id_0_mem_sign_ext_flag),
        .mem_sel_in(id_0_mem_sel),
        .mem_write_data_in(id_0_mem_write_data),
        .mem_read_flag_out(idex_0_mem_read_flag_out),
        .mem_write_flag_out(idex_0_mem_write_flag_out),
        .mem_sign_ext_flag_out(idex_0_mem_sign_ext_flag_out),
        .mem_sel_out(idex_0_mem_sel_out),
        .mem_write_data_out(idex_0_mem_write_data_out),
        .clk(clk_1),
        .rst(rst_1),
        .debug_pc_addr_in(id_0_debug_pc_addr),
        .debug_pc_addr_out(idex_0_debug_pc_addr_out),
        .stall_current_stage(pipelinecontroller_0_stall_id),
        .stall_next_stage(pipelinecontroller_0_stall_ex)
    );

    EX ex_0(
        .funct(idex_0_funct_out),
        .shamt(idex_0_shamt_out),
        .operand_1(idex_0_operand_1_out),
        .operand_2(idex_0_operand_2_out),
        .write_reg_en_in(idex_0_write_reg_en_out),
        .write_reg_addr_in(idex_0_write_reg_addr_out),
        .result_out(ex_0_result_out),
        .write_reg_en_out(ex_0_write_reg_en_out),
        .write_reg_addr_out(ex_0_write_reg_addr_out),
        .hilo_write_en(ex_0_hilo_write_en),
        .hi_out(ex_0_hi_out),
        .lo_out(ex_0_lo_out),
        .hi_in(hiloreadproxy_0_hi_out),
        .lo_in(hiloreadproxy_0_lo_out),
        .mem_read_flag_in(idex_0_mem_read_flag_out),
        .mem_write_flag_in(idex_0_mem_write_flag_out),
        .mem_sign_ext_flag_in(idex_0_mem_sign_ext_flag_out),
        .mem_sel_in(idex_0_mem_sel_out),
        .mem_write_data_in(idex_0_mem_write_data_out),
        .mem_read_flag_out(ex_0_mem_read_flag_out),
        .mem_write_flag_out(ex_0_mem_write_flag_out),
        .mem_sign_ext_flag_out(ex_0_mem_sign_ext_flag_out),
        .mem_sel_out(ex_0_mem_sel_out),
        .mem_write_data_out(ex_0_mem_write_data_out),
        .rst(rst_1),
        .debug_pc_addr_in(idex_0_debug_pc_addr_out),
        .debug_pc_addr_out(ex_0_debug_pc_addr_out),
        .stall_request(ex_0_stall_request),
        .ex_load_flag(ex_0_ex_load_flag)
    );

    EXMEM exmem_0(
        .result_in(ex_0_result_out),
        .write_reg_en_in(ex_0_write_reg_en_out),
        .write_reg_addr_in(ex_0_write_reg_addr_out),
        .result_out(exmem_0_result_out),
        .write_reg_en_out(exmem_0_write_reg_en_out),
        .write_reg_addr_out(exmem_0_write_reg_addr_out),
        .hilo_write_en_in(ex_0_hilo_write_en),
        .hi_in(ex_0_hi_out),
        .lo_in(ex_0_lo_out),
        .hilo_write_en_out(exmem_0_hilo_write_en_out),
        .hi_out(exmem_0_hi_out),
        .lo_out(exmem_0_lo_out),
        .mem_read_flag_in(ex_0_mem_read_flag_out),
        .mem_write_flag_in(ex_0_mem_write_flag_out),
        .mem_sign_ext_flag_in(ex_0_mem_sign_ext_flag_out),
        .mem_sel_in(ex_0_mem_sel_out),
        .mem_write_data_in(ex_0_mem_write_data_out),
        .mem_read_flag_out(exmem_0_mem_read_flag_out),
        .mem_write_flag_out(exmem_0_mem_write_flag_out),
        .mem_sign_ext_flag_out(exmem_0_mem_sign_ext_flag_out),
        .mem_sel_out(exmem_0_mem_sel_out),
        .mem_write_data_out(exmem_0_mem_write_data_out),
        .clk(clk_1),
        .rst(rst_1),
        .debug_pc_addr_in(ex_0_debug_pc_addr_out),
        .debug_pc_addr_out(exmem_0_debug_pc_addr_out),
        .stall_current_stage(pipelinecontroller_0_stall_ex),
        .stall_next_stage(pipelinecontroller_0_stall_mem)
    );

    MEM mem_0(
        .result_in(exmem_0_result_out),
        .write_reg_en_in(exmem_0_write_reg_en_out),
        .write_reg_addr_in(exmem_0_write_reg_addr_out),
        .result_out(mem_0_result_out),
        .write_reg_en_out(mem_0_write_reg_en_out),
        .write_reg_addr_out(mem_0_write_reg_addr_out),
        .hilo_write_en_in(exmem_0_hilo_write_en_out),
        .hi_in(exmem_0_hi_out),
        .lo_in(exmem_0_lo_out),
        .hilo_write_en_out(mem_0_hilo_write_en_out),
        .hi_out(mem_0_hi_out),
        .lo_out(mem_0_lo_out),
        .mem_read_flag(exmem_0_mem_read_flag_out),
        .mem_write_flag(exmem_0_mem_write_flag_out),
        .mem_sign_ext_flag(exmem_0_mem_sign_ext_flag_out),
        .mem_sel(exmem_0_mem_sel_out),
        .mem_write_data(exmem_0_mem_write_data_out),
        .ram_read_data(ram_read_data_1),
        .ram_write_data(mem_0_ram_write_data),
        .ram_addr(mem_0_ram_addr),
        .ram_write_en(mem_0_ram_write_sel),
        .ram_en(mem_0_ram_en),
        .rst(rst_1),
        .debug_pc_addr_in(exmem_0_debug_pc_addr_out),
        .debug_pc_addr_out(mem_0_debug_pc_addr_out)
    );

    MEMWB memwb_0(
        .result_in(mem_0_result_out),
        .write_reg_en_in(mem_0_write_reg_en_out),
        .write_reg_addr_in(mem_0_write_reg_addr_out),
        .write_reg_en_out(memwb_0_write_reg_en_out),
        .result_out(memwb_0_result_out),
        .write_reg_addr_out(memwb_0_write_reg_addr_out),
        .hilo_write_en_out(memwb_0_hilo_write_en_out),
        .hi_out(memwb_0_hi_out),
        .lo_out(memwb_0_lo_out),
        .hilo_write_en_in(mem_0_hilo_write_en_out),
        .hi_in(mem_0_hi_out),
        .lo_in(mem_0_lo_out),
        .clk(clk_1),
        .rst(rst_1),
        .debug_pc_addr_out(memwb_0_debug_pc_addr_out),
        .debug_reg_write_en(memwb_0_debug_reg_write_en),
        .debug_pc_addr_in(mem_0_debug_pc_addr_out),
        .stall_current_stage(pipelinecontroller_0_stall_mem),
        .stall_next_stage(pipelinecontroller_0_stall_wb)
    );

    RegReadProxy regreadproxy_0(
        .read_addr_2(id_0_reg_addr_2),
        .read_addr_1(id_0_reg_addr_1),
        .read_en_2(id_0_reg_read_en_2),
        .read_en_1(id_0_reg_read_en_1),
        .data_from_ex(ex_0_result_out),
        .reg_write_en_from_ex(ex_0_write_reg_en_out),
        .reg_write_addr_from_ex(ex_0_write_reg_addr_out),
        .data_from_mem(mem_0_result_out),
        .reg_write_en_from_mem(mem_0_write_reg_en_out),
        .reg_write_addr_from_mem(mem_0_write_reg_addr_out),
        .read_data_1(regreadproxy_0_read_data_1),
        .read_data_2(regreadproxy_0_read_data_2),
        .data_1_from_reg(regfile_0_read_data_1),
        .data_2_from_reg(regfile_0_read_data_2),
        .load_related_1(regreadproxy_0_load_related_1),
        .load_related_2(regreadproxy_0_load_related_2),
        .ex_load_flag(ex_0_ex_load_flag)
    );

    PipelineController pipelinecontroller_0(
        .rst(rst_1),
        .request_from_id(id_0_stall_request),
        .request_from_ex(ex_0_stall_request),
        .stall_pc(pipelinecontroller_0_stall_pc),
        .stall_if(pipelinecontroller_0_stall_if),
        .stall_id(pipelinecontroller_0_stall_id),
        .stall_ex(pipelinecontroller_0_stall_ex),
        .stall_mem(pipelinecontroller_0_stall_mem),
        .stall_wb(pipelinecontroller_0_stall_wb)
    );

endmodule // Uranus
